// =====================================
// „Ç≤„Éº„É†Áä∂ÊÖãÁÆ°ÁêÜ
// =====================================
class SugorokuGame {
  constructor() {
      this.players = {
          player: {
              position: 0,
              money: 1000,
              name: 'üéÆ „Éó„É¨„Ç§„É§„Éº',
              token: 'player-token',
              isHuman: true
          },
          cpu: {
              position: 0,
              money: 1000,
              name: 'ü§ñ CPU',
              token: 'cpu-token',
              isHuman: false
          }
      };
      
      this.currentPlayer = 'player';
      this.gameEnded = false;
      this.autoMode = false;
      this.animating = false;
      
      // DOMË¶ÅÁ¥†„ÅÆÂèñÂæó
      this.diceElement = document.getElementById('dice');
      this.diceButton = document.getElementById('dice-button');
      this.diceResult = document.getElementById('dice-result');
      this.currentTurnElement = document.getElementById('current-turn');
      this.logContent = document.getElementById('log-content');
      this.gameResult = document.getElementById('game-result');
      
      // „Éû„Çπ„ÅÆ„Ç§„Éô„É≥„Éà„Éá„Éº„Çø
      this.squareEvents = this.initializeSquareEvents();
      
      // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÅÆË®≠ÂÆö
      this.setupEventListeners();
      
      // ÂàùÊúüË°®Á§∫„ÅÆÊõ¥Êñ∞
      this.updateDisplay();
      this.addLog('„Ç≤„Éº„É†„ÇíÈñãÂßã„Åó„Åæ„Åó„ÅüÔºÅ', 'game-event');
  }
  
  // =====================================
  // „Éû„Çπ„Ç§„Éô„É≥„Éà„ÅÆÂàùÊúüÂåñ
  // =====================================
  initializeSquareEvents() {
      return {
          0: { name: '‰∫∫Áîü„Çπ„Çø„Éº„Éà', effect: 0, description: 'ÂÖÉÊ∞ó„Çà„ÅèÂá∫Áô∫ÔºÅ' },
          1: { name: 'Âàù„ÇÅ„Å¶„ÅÆÊ≠©Ë°å', effect: 200, description: '„Éë„Éë„Éû„Éû„ÅåÂñú„Çì„Åß„ÅäÂ∞èÈÅ£„ÅÑ' },
          2: { name: 'Ë™ïÁîüÊó•„Éó„É¨„Çº„É≥„Éà', effect: 300, description: '„Åä„Åò„ÅÑ„Å°„ÇÉ„Çì„Åã„Çâ„ÅäÂπ¥Áéâ' },
          3: { name: 'Ëª¢„Çì„ÅßÂ§ßÊ≥£„Åç', effect: -100, description: '„ÅäËèìÂ≠ê‰ª£„Åå„Å™„Åè„Å™„Å£„Åü' },
          4: { name: '„Çµ„Éº„Ç´„Çπ„ÇíË¶ã„Å´Ë°å„Åè', effect: -150, description: 'ÂÖ•Â†¥Êñô„Åå„Åã„Åã„Å£„Åü' },
          5: { name: '„ÅäÊâã‰ºù„ÅÑ„Åß„ÅäÂ∞èÈÅ£„ÅÑ', effect: 100, description: '„ÅäÊØç„Åï„Çì„ÅÆ„ÅäÊâã‰ºù„ÅÑ' },
          6: { name: 'ÁµµÁîª„Ç≥„É≥„ÇØ„Éº„É´', effect: 250, description: 'Ë≥ûÈáë„Çí„ÇÇ„Çâ„Å£„Åü' },
          7: { name: 'Ëá™Ëª¢Ëªä„ÅÆÁ∑¥Áøí', effect: -50, description: 'Ëª¢„Çì„ÅßÁµÜÂâµËÜè‰ª£' },
          8: { name: '„Ç≤„Éº„É†Ê©ü„Çí„Å≠„Å†„Çã', effect: -200, description: '„ÅäÂ∞èÈÅ£„ÅÑ„ÇíÂâçÂÄü„Çä' },
          9: { name: 'Ê≠Ø„ÅåÊäú„Åë„Åü', effect: 100, description: 'Ê≠Ø„ÅÆÂ¶ñÁ≤æ„Åã„Çâ„Éó„É¨„Çº„É≥„Éà' },
          10: { name: 'Â∞èÂ≠¶Ê†°ÂÖ•Â≠¶', effect: 500, description: 'ÂÖ•Â≠¶Á•ù„ÅÑ„Çí„ÇÇ„Çâ„Å£„Åü' },
          11: { name: '„ÉÜ„Çπ„Éà„ÅßÊ∫ÄÁÇπ', effect: 300, description: 'È†ëÂºµ„Å£„Åü„ÅîË§íÁæé' },
          12: { name: 'ÂÆøÈ°å„ÇíÂøò„Çå„Çã', effect: -100, description: 'ÂÖàÁîü„Å´ÊÄí„Çâ„Çå„Å¶ÂèçÁúÅ' },
          13: { name: 'ÈÅãÂãï‰ºö„Åß1‰Ωç', effect: 200, description: 'Ë≥ûÂìÅ„Çí„ÇÇ„Çâ„Å£„Åü' },
          14: { name: 'Â≠¶Ëä∏‰ºö„ÅÆ‰∏ªÂΩπ', effect: 150, description: '„ÅäÁñ≤„ÇåÊßò„ÅÆ„ÅäÂ∞èÈÅ£„ÅÑ' },
          15: { name: 'ÂèãÈÅî„Å®„Ç±„É≥„Ç´', effect: -80, description: '‰ª≤Áõ¥„Çä„ÅÆ„ÅäËèìÂ≠ê‰ª£' },
          16: { name: 'Êº¢Â≠óÊ§úÂÆöÂêàÊ†º', effect: 400, description: '„ÅäÁ•ù„ÅÑ„Çí„ÇÇ„Çâ„Å£„Åü' },
          17: { name: '„Éê„É¨„É≥„Çø„Ç§„É≥„Éá„Éº', effect: -120, description: '„ÉÅ„Éß„Ç≥„ÇíË≤∑„Å£„Åü' },
          18: { name: '‰øÆÂ≠¶ÊóÖË°å', effect: -300, description: '„ÅäÂúüÁî£‰ª£„Åå„Åã„Åã„Å£„Åü' },
          19: { name: 'Ë™≠Êõ∏ÊÑüÊÉ≥Êñá„Ç≥„É≥„ÇØ„Éº„É´', effect: 250, description: 'Âõ≥Êõ∏Âà∏„Çí„ÇÇ„Çâ„Å£„Åü' },
          20: { name: 'ÂçíÊ•≠Âºè', effect: 600, description: 'ÂçíÊ•≠Á•ù„ÅÑ„Çí„ÇÇ„Çâ„Å£„Åü' },
          21: { name: 'Â∞±ËÅ∑Ê¥ªÂãï', effect: -800, description: '„Çπ„Éº„ÉÑ‰ª£„Åå„Åã„Åã„Å£„Åü' },
          22: { name: 'ÂàùÂá∫Âã§', effect: -500, description: 'Ê≠ìËøé‰ºö„ÅßÈ£≤„Åø‰ºö‰ª£' },
          23: { name: 'Âàù‰ªªÁµ¶', effect: 1000, description: 'ÂøµÈ°ò„ÅÆÁµ¶ÊñôÊó•' },
          24: { name: 'ÈÅÖÂàª„Åó„Å¶„Çø„ÇØ„Ç∑„Éº', effect: -300, description: '‰∫§ÈÄöË≤ª„Åå„Åã„Åã„Å£„Åü' },
          25: { name: '„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊàêÂäü', effect: 800, description: '„Éú„Éº„Éä„Çπ„Çí„ÇÇ„Çâ„Å£„Åü' },
          26: { name: 'ÂêåÂÉö„ÅÆÁµêÂ©öÂºè', effect: -600, description: '„ÅîÁ•ùÂÑÄ„ÇíÂåÖ„Çì„Å†' },
          27: { name: 'ÊòáÊ†º', effect: 700, description: 'ÊòáÊ†ºÁ•ù„ÅÑ„Çí„ÇÇ„Çâ„Å£„Åü' },
          28: { name: 'ÂøòÂπ¥‰ºö', effect: -400, description: 'È£≤„ÅøÈÅé„Åé„Å¶Êï£Ë≤°' },
          29: { name: 'Ë≥áÊ†ºÂèñÂæó', effect: 500, description: 'Ë≥áÊ†ºÊâãÂΩì„Åå„Å§„ÅÑ„Åü' },
          30: { name: 'Ëªä„ÇíË≥ºÂÖ•', effect: -1200, description: 'È†≠Èáë„ÇíÊîØÊâï„Å£„Åü' },
          31: { name: 'Âºï„Å£Ë∂ä„Åó', effect: -800, description: 'Âºï„Å£Ë∂ä„ÅóË≤ªÁî®„Åå„Åã„Åã„Å£„Åü' },
          32: { name: 'ÁµêÂ©ö', effect: 1500, description: 'ÁµêÂ©öÁ•ù„ÅÑ„Çí„ÇÇ„Çâ„Å£„Åü' },
          33: { name: 'Â≠ê‰æõË™ïÁîü', effect: -1000, description: 'Âá∫Áî£Ë≤ªÁî®„Åå„Åã„Åã„Å£„Åü' },
          34: { name: 'ÂÆ∂Èõª„ÇíË≤∑„ÅÑÊõø„Åà', effect: -600, description: 'ÂÜ∑ËîµÂ∫´„Å®„ÉÜ„É¨„ÉìË≥ºÂÖ•' },
          35: { name: 'ÂÆ∂ÊóèÊóÖË°å', effect: -900, description: 'ÊóÖË°åË≤ªÁî®„Åå„Åã„Åã„Å£„Åü' },
          36: { name: '„Ç¢„Ç§„Éá„Ç¢ÁâπË®±', effect: 1200, description: 'ÁâπË®±ÊñôÂèéÂÖ•' },
          37: { name: 'MBAÂèñÂæó', effect: -1500, description: 'Â≠¶Ë≤ª„Åå„Åã„Åã„Å£„Åü' },
          38: { name: 'ÂÑ™ÁßÄÁ§æÂì°Ë≥û', effect: 800, description: 'Ë°®ÂΩ∞Èáë„Çí„ÇÇ„Çâ„Å£„Åü' },
          39: { name: 'ÊäïË≥áÊàêÂäü', effect: 2000, description: 'Ê†™„ÅßÂ§ßÂÑ≤„Åë' },
          40: { name: '‰∫∫ÁîüÂÆåËµ∞ÔºÅ', effect: 1000, description: '„ÅäÁñ≤„ÇåÊßò„Åß„Åó„ÅüÔºÅ' }
      };
  }
  
  // =====================================
  // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÅÆË®≠ÂÆö
  // =====================================
  setupEventListeners() {
      this.diceButton.addEventListener('click', () => this.rollDice());
      
      document.getElementById('reset-button').addEventListener('click', () => this.resetGame());
      
      document.getElementById('auto-button').addEventListener('click', () => this.toggleAutoMode());
      
      document.getElementById('restart-button').addEventListener('click', () => this.restartGame());
      
      // „Çµ„Ç§„Ç≥„É≠„ÇØ„É™„ÉÉ„ÇØ„Åß„ÇÇÊåØ„Çå„Çã„Çà„ÅÜ„Å´
      this.diceElement.addEventListener('click', () => {
          if (!this.diceButton.disabled && !this.animating) {
              this.rollDice();
          }
      });
      
      // „Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà
      document.addEventListener('keydown', (e) => {
          if (this.gameEnded) return;
          
          switch(e.key) {
              case ' ':
              case 'Enter':
                  e.preventDefault();
                  if (!this.diceButton.disabled && !this.animating) {
                      this.rollDice();
                  }
                  break;
              case 'r':
              case 'R':
                  if (e.ctrlKey) {
                      e.preventDefault();
                      this.resetGame();
                  }
                  break;
              case 'a':
              case 'A':
                  if (e.ctrlKey) {
                      e.preventDefault();
                      this.toggleAutoMode();
                  }
                  break;
          }
      });
  }
  
  // =====================================
  // „Çµ„Ç§„Ç≥„É≠„ÇíÊåØ„Çã
  // =====================================
  async rollDice() {
      if (this.animating || this.gameEnded) return;
      
      this.animating = true;
      this.diceButton.disabled = true;
      
      // „Çµ„Ç§„Ç≥„É≠„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
      this.diceElement.classList.add('rolling');
      this.diceResult.textContent = 'ÊåØ„Å£„Å¶„ÅÑ„Åæ„Åô...';
      
      // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰∏≠„ÅÆ„Çµ„Ç§„Ç≥„É≠Ë°®Á§∫
      const animationPromise = this.animateDiceRoll();
      
      // 1-6„ÅÆ„É©„É≥„ÉÄ„É†„Å™ÂÄ§
      const diceValue = Math.floor(Math.random() * 6) + 1;
      
      await animationPromise;
      
      // ÊúÄÁµÇÁöÑ„Å™„Çµ„Ç§„Ç≥„É≠„ÅÆÂÄ§„ÇíË°®Á§∫
      this.displayDiceValue(diceValue);
      this.diceResult.textContent = `${diceValue} „ÅåÂá∫„Åæ„Åó„ÅüÔºÅ`;
      
      const currentPlayerData = this.players[this.currentPlayer];
      this.addLog(`${currentPlayerData.name}„Åå${diceValue}„ÇíÂá∫„Åó„Åæ„Åó„Åü`, 
                 this.currentPlayer === 'player' ? 'player-action' : 'cpu-action');
      
      // „Éó„É¨„Ç§„É§„Éº„ÇíÁßªÂãï
      await this.movePlayer(this.currentPlayer, diceValue);
      
      // „Ç≤„Éº„É†ÁµÇ‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ
      if (this.checkGameEnd()) {
          this.endGame();
          return;
      }
      
      // „Çø„Éº„É≥„ÇíÂ§âÊõ¥
      this.switchTurn();
      
      this.animating = false;
      
      // „Ç™„Éº„Éà„É¢„Éº„Éâ„Åæ„Åü„ÅØCPU„ÅÆ„Çø„Éº„É≥„ÅÆÂ†¥Âêà„ÄÅËá™Âãï„ÅßÊ¨°„ÅÆ„Çµ„Ç§„Ç≥„É≠„ÇíÊåØ„Çã
      if (this.autoMode || this.currentPlayer === 'cpu') {
          setTimeout(() => {
              if (!this.gameEnded) {
                  this.rollDice();
              }
          }, 1500);
      } else {
          this.diceButton.disabled = false;
      }
  }
  
  // =====================================
  // „Çµ„Ç§„Ç≥„É≠„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
  // =====================================
  async animateDiceRoll() {
      const diceNumbers = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
      const animationSteps = 20;
      const stepDuration = 50;
      
      for (let i = 0; i < animationSteps; i++) {
          const randomIndex = Math.floor(Math.random() * 6);
          this.diceElement.querySelector('.dice-face').textContent = diceNumbers[randomIndex];
          await this.delay(stepDuration);
      }
      
      this.diceElement.classList.remove('rolling');
  }
  
  // =====================================
  // „Çµ„Ç§„Ç≥„É≠„ÅÆÂÄ§„ÇíË°®Á§∫
  // =====================================
  displayDiceValue(value) {
      const diceDisplay = {
          1: '‚öÄ', 2: '‚öÅ', 3: '‚öÇ', 4: '‚öÉ', 5: '‚öÑ', 6: '‚öÖ'
      };
      this.diceElement.querySelector('.dice-face').textContent = diceDisplay[value];
  }
  
  // =====================================
  // „Éó„É¨„Ç§„É§„Éº„ÇíÁßªÂãï
  // =====================================
  async movePlayer(playerType, steps) {
      const player = this.players[playerType];
      const startPosition = player.position;
      
      // 1„Éû„Çπ„Åö„Å§ÁßªÂãï„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
      for (let i = 1; i <= steps; i++) {
          await this.delay(300);
          const newPosition = Math.min(startPosition + i, 40);
          await this.movePlayerToPosition(playerType, newPosition);
      }
      
      const finalPosition = Math.min(startPosition + steps, 40);
      player.position = finalPosition;
      
      // „Éû„Çπ„ÅÆ„Ç§„Éô„É≥„Éà„ÇíÂá¶ÁêÜ
      await this.processSquareEvent(playerType, finalPosition);
      
      this.updateDisplay();
  }
  
  // =====================================
  // „Éó„É¨„Ç§„É§„Éº„ÇíÊåáÂÆö‰ΩçÁΩÆ„Å´ÁßªÂãï
  // =====================================
  async movePlayerToPosition(playerType, position) {
      const player = this.players[playerType];
      const tokenClass = player.token;
      
      // ÁèæÂú®„ÅÆ‰ΩçÁΩÆ„Åã„Çâ„Éà„Éº„ÇØ„É≥„ÇíÂâäÈô§
      const currentTokens = document.querySelectorAll(`.${tokenClass}`);
      currentTokens.forEach(token => token.remove());
      
      // Êñ∞„Åó„ÅÑ‰ΩçÁΩÆ„Å´„Éà„Éº„ÇØ„É≥„ÇíËøΩÂä†
      const targetSquare = document.querySelector(`[data-position="${position}"] .player-tokens`);
      if (targetSquare) {
          const token = document.createElement('div');
          token.className = `token ${tokenClass}`;
          token.textContent = playerType === 'player' ? 'üéÆ' : 'ü§ñ';
          token.classList.add('moving');
          targetSquare.appendChild(token);
          
          // „Éû„Çπ„Çí„Éè„Ç§„É©„Ç§„Éà
          const square = document.querySelector(`[data-position="${position}"]`);
          square.classList.add('active');
          setTimeout(() => square.classList.remove('active'), 500);
      }
  }
  
  // =====================================
  // „Éû„Çπ„Ç§„Éô„É≥„Éà„ÅÆÂá¶ÁêÜ
  // =====================================
  async processSquareEvent(playerType, position) {
      const player = this.players[playerType];
      const event = this.squareEvents[position];
      
      if (!event) return;
      
      const oldMoney = player.money;
      player.money += event.effect;
      
      // „Éû„Ç§„Éä„Çπ„ÅÆÂ†¥Âêà„ÅØ0ÂÜÜ„Çí‰∏ãÂõû„Çâ„Å™„ÅÑ„Çà„ÅÜ„Å´
      if (player.money < 0) {
          player.money = 0;
      }
      
      // „Ç§„Éô„É≥„Éà„É≠„Ç∞„ÇíËøΩÂä†
      let logMessage = `${player.name}„Åå„Äå${event.name}„Äç„Å´Ê≠¢„Åæ„Çä„Åæ„Åó„Åü„ÄÇ`;
      if (event.effect > 0) {
          logMessage += ` +${event.effect}ÂÜÜ`;
      } else if (event.effect < 0) {
          logMessage += ` ${event.effect}ÂÜÜ`;
      }
      
      this.addLog(logMessage, 'game-event');
      
      // ÊâÄÊåÅÈáëÂ§âÊõ¥„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
      if (event.effect !== 0) {
          const moneyElement = document.getElementById(`${playerType}-money`);
          moneyElement.classList.add('changing');
          setTimeout(() => moneyElement.classList.remove('changing'), 600);
      }
      
      // ‰ΩçÁΩÆÊÉÖÂ†±„ÇíÊõ¥Êñ∞
      this.updatePositionDisplay(playerType, position);
  }
  
  // =====================================
  // ‰ΩçÁΩÆË°®Á§∫„ÅÆÊõ¥Êñ∞
  // =====================================
  updatePositionDisplay(playerType, position) {
      const positionElement = document.getElementById(`${playerType}-position`);
      const event = this.squareEvents[position];
      
      if (position === 0) {
          positionElement.textContent = '„Çπ„Çø„Éº„Éà';
      } else if (position === 40) {
          positionElement.textContent = '„Ç¥„Éº„É´';
      } else {
          positionElement.textContent = `${position}Áï™ÁõÆ (${event.name})`;
      }
  }
  
  // =====================================
  // „Çø„Éº„É≥Âàá„ÇäÊõø„Åà
  // =====================================
  switchTurn() {
      this.currentPlayer = this.currentPlayer === 'player' ? 'cpu' : 'player';
      this.updateTurnDisplay();
  }
  
  // =====================================
  // „Çø„Éº„É≥Ë°®Á§∫„ÅÆÊõ¥Êñ∞
  // =====================================
  updateTurnDisplay() {
      const playerData = this.players[this.currentPlayer];
      this.currentTurnElement.textContent = `${playerData.name}„ÅÆ„Çø„Éº„É≥`;
      
      if (this.currentPlayer === 'player' && !this.autoMode) {
          this.diceButton.disabled = false;
      }
  }
  
  // =====================================
  // ÁîªÈù¢Ë°®Á§∫„ÅÆÊõ¥Êñ∞
  // =====================================
  updateDisplay() {
      // ÊâÄÊåÅÈáë„ÅÆÊõ¥Êñ∞
      document.getElementById('player-money').textContent = this.players.player.money;
      document.getElementById('cpu-money').textContent = this.players.cpu.money;
      
      // ‰ΩçÁΩÆ„ÅÆÊõ¥Êñ∞
      this.updatePositionDisplay('player', this.players.player.position);
      this.updatePositionDisplay('cpu', this.players.cpu.position);
      
      // „Çø„Éº„É≥Ë°®Á§∫„ÅÆÊõ¥Êñ∞
      this.updateTurnDisplay();
  }
  
  // =====================================
  // „Ç≤„Éº„É†ÁµÇ‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ
  // =====================================
  checkGameEnd() {
      return this.players.player.position >= 40 || this.players.cpu.position >= 40;
  }
  
  // =====================================
  // „Ç≤„Éº„É†ÁµÇ‰∫Ü
  // =====================================
  endGame() {
      this.gameEnded = true;
      this.diceButton.disabled = true;
      
      const playerMoney = this.players.player.money;
      const cpuMoney = this.players.cpu.money;
      
      // ÊúÄÁµÇ„Çπ„Ç≥„Ç¢„ÇíË°®Á§∫
      document.getElementById('final-player-score').textContent = `${playerMoney}ÂÜÜ`;
      document.getElementById('final-cpu-score').textContent = `${cpuMoney}ÂÜÜ`;
      
      // ÂãùËÄÖ„ÇíÊ±∫ÂÆö
      const winnerElement = document.getElementById('winner-announcement');
      let winnerMessage = '';
      let winnerClass = '';
      
      if (playerMoney > cpuMoney) {
          winnerMessage = 'üéâ „Éó„É¨„Ç§„É§„Éº„ÅÆÂãùÂà©ÔºÅ üéâ';
          winnerClass = 'player-wins';
          this.addLog('üéâ „Éó„É¨„Ç§„É§„Éº„ÅåÂãùÂà©„Åó„Åæ„Åó„ÅüÔºÅ', 'game-event');
      } else if (cpuMoney > playerMoney) {
          winnerMessage = 'ü§ñ CPU„ÅÆÂãùÂà©ÔºÅ ü§ñ';
          winnerClass = 'cpu-wins';
          this.addLog('ü§ñ CPU„ÅåÂãùÂà©„Åó„Åæ„Åó„ÅüÔºÅ', 'game-event');
      } else {
          winnerMessage = 'ü§ù Âºï„ÅçÂàÜ„ÅëÔºÅ ü§ù';
          winnerClass = 'tie';
          this.addLog('ü§ù Âºï„ÅçÂàÜ„Åë„Åß„ÅôÔºÅ', 'game-event');
      }
      
      winnerElement.textContent = winnerMessage;
      winnerElement.className = `winner-announcement ${winnerClass}`;
      
      // ÁµêÊûúÁîªÈù¢„ÇíË°®Á§∫
      this.gameResult.style.display = 'flex';
      
      // Ëá™Âãï„É¢„Éº„Éâ„ÇíÂÅúÊ≠¢
      this.autoMode = false;
      this.updateAutoButton();
      
      this.addLog('„Ç≤„Éº„É†„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ„ÅäÁñ≤„ÇåÊßò„Åß„Åó„ÅüÔºÅ', 'game-event');
  }
  
  // =====================================
  // „Ç™„Éº„Éà„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà
  // =====================================
  toggleAutoMode() {
      if (this.gameEnded) return;
      
      this.autoMode = !this.autoMode;
      this.updateAutoButton();
      
      if (this.autoMode) {
          this.addLog('„Ç™„Éº„Éà„É¢„Éº„Éâ„ÅåÊúâÂäπ„Å´„Å™„Çä„Åæ„Åó„Åü', 'game-event');
          if (!this.animating) {
              setTimeout(() => this.rollDice(), 500);
          }
      } else {
          this.addLog('„Ç™„Éº„Éà„É¢„Éº„Éâ„ÅåÁÑ°Âäπ„Å´„Å™„Çä„Åæ„Åó„Åü', 'game-event');
          if (this.currentPlayer === 'player') {
              this.diceButton.disabled = false;
          }
      }
  }
  
  // =====================================
  // „Ç™„Éº„Éà„Éú„Çø„É≥„ÅÆÊõ¥Êñ∞
  // =====================================
  updateAutoButton() {
      const autoButton = document.getElementById('auto-button');
      autoButton.textContent = this.autoMode ? '„Ç™„Éº„ÉàÂÅúÊ≠¢' : '„Ç™„Éº„ÉàÈÄ≤Ë°å';
      autoButton.style.background = this.autoMode 
          ? 'linear-gradient(135deg, #e74c3c, #c0392b)' 
          : 'linear-gradient(135deg, #f39c12, #e67e22)';
  }
  
  // =====================================
  // „Ç≤„Éº„É†„É™„Çª„ÉÉ„Éà
  // =====================================
  resetGame() {
      // „Éó„É¨„Ç§„É§„ÉºÊÉÖÂ†±„Çí„É™„Çª„ÉÉ„Éà
      this.players.player = {
          position: 0,
          money: 1000,
          name: 'üéÆ „Éó„É¨„Ç§„É§„Éº',
          token: 'player-token',
          isHuman: true
      };
      
      this.players.cpu = {
          position: 0,
          money: 1000,
          name: 'ü§ñ CPU',
          token: 'cpu-token',
          isHuman: false
      };
      
      // „Ç≤„Éº„É†Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
      this.currentPlayer = 'player';
      this.gameEnded = false;
      this.autoMode = false;
      this.animating = false;
      
      // „Éà„Éº„ÇØ„É≥„Çí„Çπ„Çø„Éº„Éà‰ΩçÁΩÆ„Å´ÁßªÂãï
      this.resetTokenPositions();
      
      // ÁîªÈù¢„Çí„É™„Çª„ÉÉ„Éà
      this.diceButton.disabled = false;
      this.diceResult.textContent = 'Ê∫ñÂÇôÂÆå‰∫Ü';
      this.diceElement.querySelector('.dice-face').textContent = 'üé≤';
      this.gameResult.style.display = 'none';
      
      // „É≠„Ç∞„Çí„ÇØ„É™„Ç¢
      this.logContent.innerHTML = '';
      
      // Ë°®Á§∫„ÇíÊõ¥Êñ∞
      this.updateDisplay();
      this.updateAutoButton();
      
      this.addLog('„Ç≤„Éº„É†„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü', 'game-event');
  }
  
  // =====================================
  // „Éà„Éº„ÇØ„É≥‰ΩçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà
  // =====================================
  resetTokenPositions() {
      // ÂÖ®„Å¶„ÅÆ„Éà„Éº„ÇØ„É≥„ÇíÂâäÈô§
      const allTokens = document.querySelectorAll('.token');
      allTokens.forEach(token => token.remove());
      
      // „Çπ„Çø„Éº„Éà‰ΩçÁΩÆ„Å´„Éà„Éº„ÇØ„É≥„ÇíÈÖçÁΩÆ
      const startSquare = document.querySelector('[data-position="0"] .player-tokens');
      if (startSquare) {
          const playerToken = document.createElement('div');
          playerToken.className = 'token player-token';
          playerToken.textContent = 'üéÆ';
          startSquare.appendChild(playerToken);
          
          const cpuToken = document.createElement('div');
          cpuToken.className = 'token cpu-token';
          cpuToken.textContent = 'ü§ñ';
          startSquare.appendChild(cpuToken);
      }
  }
  
  // =====================================
  // „Ç≤„Éº„É†ÂÜçÈñã
  // =====================================
  restartGame() {
      this.resetGame();
  }
  
  // =====================================
  // „É≠„Ç∞ËøΩÂä†
  // =====================================
  addLog(message, type = 'game-event') {
      const logEntry = document.createElement('div');
      logEntry.className = `log-entry ${type}`;
      logEntry.textContent = `${this.getCurrentTime()} ${message}`;
      
      this.logContent.appendChild(logEntry);
      this.logContent.scrollTop = this.logContent.scrollHeight;
      
      // „É≠„Ç∞Êï∞„ÇíÂà∂ÈôêÔºàÊúÄÂ§ß50‰ª∂Ôºâ
      const logEntries = this.logContent.querySelectorAll('.log-entry');
      if (logEntries.length > 50) {
          logEntries[0].remove();
      }
  }
  
  // =====================================
  // ÁèæÂú®ÊôÇÂàª„ÇíÂèñÂæó
  // =====================================
  getCurrentTime() {
      const now = new Date();
      return `[${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}]`;
  }
  
  // =====================================
  // ÈÅÖÂª∂Âá¶ÁêÜ
  // =====================================
  delay(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
  }
  
  // =====================================
  // „Éá„Éê„ÉÉ„Ç∞Ê©üËÉΩ
  // =====================================
  debug() {
      console.log('=== „Ç≤„Éº„É†Áä∂ÊÖã ===');
      console.log('„Éó„É¨„Ç§„É§„Éº:', this.players.player);
      console.log('CPU:', this.players.cpu);
      console.log('ÁèæÂú®„ÅÆ„Çø„Éº„É≥:', this.currentPlayer);
      console.log('„Ç≤„Éº„É†ÁµÇ‰∫Ü:', this.gameEnded);
      console.log('„Ç™„Éº„Éà„É¢„Éº„Éâ:', this.autoMode);
      console.log('„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰∏≠:', this.animating);
  }
  
  // =====================================
  // „ÉÅ„Éº„ÉàÊ©üËÉΩÔºàÈñãÁô∫Áî®Ôºâ
  // =====================================
  cheat(playerType, position, money) {
      if (typeof position === 'number') {
          this.players[playerType].position = Math.max(0, Math.min(40, position));
          this.movePlayerToPosition(playerType, this.players[playerType].position);
      }
      
      if (typeof money === 'number') {
          this.players[playerType].money = Math.max(0, money);
      }
      
      this.updateDisplay();
      this.addLog(`„ÉÅ„Éº„ÉàÊ©üËÉΩ: ${this.players[playerType].name}„ÅÆÁä∂ÊÖã„ÇíÂ§âÊõ¥„Åó„Åæ„Åó„Åü`, 'game-event');
  }
}

// =====================================
// „Ç≤„Éº„É†ÈñãÂßã
// =====================================
let game;

// DOM„ÅåË™≠„ÅøËæº„Åæ„Çå„Åü„Çâ„Ç≤„Éº„É†„ÇíÈñãÂßã
document.addEventListener('DOMContentLoaded', () => {
  game = new SugorokuGame();
  
  // „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„Å®„Åó„Å¶ÂÖ¨ÈñãÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
  window.gameDebug = () => game.debug();
  window.gameCheat = (playerType, position, money) => game.cheat(playerType, position, money);
  
  console.log('üéÆ ‰∫∫Áîü„Åô„Åî„Çç„Åè„Ç≤„Éº„É†„ÅåÈñãÂßã„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
  console.log('„Éá„Éê„ÉÉ„Ç∞: gameDebug()');
  console.log('„ÉÅ„Éº„Éà: gameCheat("player", ‰ΩçÁΩÆ, ÊâÄÊåÅÈáë)');
  console.log('„Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà:');
  console.log('  „Çπ„Éö„Éº„Çπ/Enter: „Çµ„Ç§„Ç≥„É≠„ÇíÊåØ„Çã');
  console.log('  Ctrl+R: „É™„Çª„ÉÉ„Éà');
  console.log('  Ctrl+A: „Ç™„Éº„Éà„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà');
});

// =====================================
// ËøΩÂä†Ê©üËÉΩ: „Ç≤„Éº„É†Áµ±Ë®à
// =====================================
class GameStats {
  constructor() {
      this.games = JSON.parse(localStorage.getItem('sugoroku-stats') || '[]');
  }
  
  addGame(playerMoney, cpuMoney, winner) {
      const gameData = {
          date: new Date().toISOString(),
          playerMoney,
          cpuMoney,
          winner,
          id: Date.now()
      };
      
      this.games.push(gameData);
      this.saveStats();
  }
  
  saveStats() {
      localStorage.setItem('sugoroku-stats', JSON.stringify(this.games));
  }
  
  getStats() {
      const playerWins = this.games.filter(g => g.winner === 'player').length;
      const cpuWins = this.games.filter(g => g.winner === 'cpu').length;
      const ties = this.games.filter(g => g.winner === 'tie').length;
      
      return {
          totalGames: this.games.length,
          playerWins,
          cpuWins,
          ties,
          playerWinRate: this.games.length > 0 ? (playerWins / this.games.length * 100).toFixed(1) : 0
      };
  }
  
  clearStats() {
      this.games = [];
      this.saveStats();
  }
}

// =====================================
// Èü≥ÈüøÂäπÊûúÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
// =====================================
class SoundManager {
  constructor() {
      this.enabled = true;
      this.volume = 0.3;
  }
  
  playDiceRoll() {
      if (!this.enabled) return;
      // Web Audio API„Çí‰Ωø„Å£„ÅüÁ∞°Âçò„Å™Èü≥„ÅÆÁîüÊàê
      this.playTone(220, 0.1);
  }
  
  playMovement() {
      if (!this.enabled) return;
      this.playTone(440, 0.05);
  }
  
  playGameEnd() {
      if (!this.enabled) return;
      // ÂãùÂà©Èü≥„ÅÆ„É°„É≠„Éá„Ç£„Éº
      setTimeout(() => this.playTone(523, 0.2), 0);
      setTimeout(() => this.playTone(659, 0.2), 200);
      setTimeout(() => this.playTone(784, 0.4), 400);
  }
  
  playTone(frequency, duration) {
      try {
          const audioContext = new (window.AudioContext || window.webkitAudioContext)();
          const oscillator = audioContext.createOscillator();
          const gainNode = audioContext.createGain();
          
          oscillator.connect(gainNode);
          gainNode.connect(audioContext.destination);
          
          oscillator.frequency.value = frequency;
          oscillator.type = 'sine';
          
          gainNode.gain.setValueAtTime(this.volume, audioContext.currentTime);
          gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);
          
          oscillator.start(audioContext.currentTime);
          oscillator.stop(audioContext.currentTime + duration);
      } catch (e) {
          // Èü≥„ÅÆÂÜçÁîü„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØÁÑ°Ë¶ñ
      }
  }
  
  toggle() {
      this.enabled = !this.enabled;
      return this.enabled;
  }
}

// =====================================
// „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ
// =====================================
class PerformanceMonitor {
  constructor() {
      this.metrics = {
          frameCount: 0,
          lastFrameTime: performance.now(),
          fps: 0
      };
      
      this.startMonitoring();
  }
  
  startMonitoring() {
      const updateFPS = () => {
          const now = performance.now();
          this.metrics.frameCount++;
          
          if (now - this.metrics.lastFrameTime >= 1000) {
              this.metrics.fps = this.metrics.frameCount;
              this.metrics.frameCount = 0;
              this.metrics.lastFrameTime = now;
          }
          
          requestAnimationFrame(updateFPS);
      };
      
      requestAnimationFrame(updateFPS);
  }
  
  getFPS() {
      return this.metrics.fps;
  }
}

// Áµ±Ë®à„Å®„Çµ„Ç¶„É≥„Éâ„Éû„Éç„Éº„Ç∏„É£„Éº„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„ÇπÂåñ
const gameStats = new GameStats();
const soundManager = new SoundManager();
const performanceMonitor = new PerformanceMonitor();

// „Ç≤„Éº„É†ÁµÇ‰∫ÜÊôÇ„Å´Áµ±Ë®à„Çí‰øùÂ≠ò„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
document.addEventListener('DOMContentLoaded', () => {
  const originalEndGame = game?.endGame;
  if (originalEndGame) {
      game.endGame = function() {
          originalEndGame.call(this);
          
          // Áµ±Ë®à„Å´ËøΩÂä†
          const playerMoney = this.players.player.money;
          const cpuMoney = this.players.cpu.money;
          let winner = 'tie';
          
          if (playerMoney > cpuMoney) winner = 'player';
          else if (cpuMoney > playerMoney) winner = 'cpu';
          
          gameStats.addGame(playerMoney, cpuMoney, winner);
          soundManager.playGameEnd();
      };
  }
});

console.log('üéÆ „Åô„Åî„Çç„Åè„Ç≤„Éº„É†ÂÆåÂÖ®Áâà„ÅåË™≠„ÅøËæº„Åæ„Çå„Åæ„Åó„ÅüÔºÅ');